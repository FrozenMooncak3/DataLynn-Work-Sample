"""
Week 1 data preparation pipeline.

This module consolidates the data-cleaning logic that originally lived inside the
exploratory notebooks.  Each helper returns a tidy DataFrame with a consistent
schema so the output can be reused across notebooks, scripts, or production jobs.
"""

from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from typing import Dict

import numpy as np
import pandas as pd


FINAL_COLUMNS = [
    "date",
    "platform",
    "campaign_name",
    "spend",
    "impressions",
    "clicks",
    "conversions",
    "revenue",
    "ctr",
    "cvr",
    "cpa",
    "roas",
]


@dataclass
class Week1Outputs:
    """Convenience container for the file paths generated by run_week1_pipeline."""

    meta_cleaned: Path
    google_cleaned: Path
    tiktok_cleaned: Path
    integrated: Path


def _replace_inf_with_nan(df: pd.DataFrame, columns: list[str]) -> pd.DataFrame:
    """Replace +/- inf with NaN for selected columns."""
    df[columns] = df[columns].replace([np.inf, -np.inf], np.nan)
    return df


def clean_meta_ads(raw_path: Path) -> pd.DataFrame:
    """Clean Meta Ads export."""
    df = pd.read_csv(raw_path, na_values=["--"])
    rename_map = {
        "Reporting starts": "date",
        "Reporting ends": "date_end",
        "Campaign name": "campaign_name",
        "Amount spent (USD)": "spend",
        "Impressions": "impressions",
        "Link clicks": "clicks",
        "Purchases": "conversions",
        "Cost per purchase (USD)": "cpa",
        "Purchase conversion value (USD)": "revenue",
        "Reach": "reach",
    }
    df = df.rename(columns=rename_map)
    df = df.drop(columns=[col for col in ["date_end"] if col in df.columns])

    df["date"] = pd.to_datetime(df["date"])
    money_cols = ["spend", "cpa", "revenue"]
    df[money_cols] = df[money_cols].apply(pd.to_numeric, errors="coerce")
    df[money_cols] = df[money_cols].round(2)

    df["platform"] = "Meta"
    df["ctr"] = df["clicks"] / df["impressions"]
    df["cvr"] = df["conversions"] / df["clicks"]
    df["cpa"] = df["spend"] / df["conversions"]
    df["roas"] = df["revenue"] / df["spend"]

    df = _replace_inf_with_nan(df, ["ctr", "cvr", "cpa", "roas"])
    df = df.sort_values("date").reset_index(drop=True)

    return df[FINAL_COLUMNS].copy()


def clean_google_ads(raw_path: Path) -> pd.DataFrame:
    """Clean Google Ads export."""
    column_names = [
        "date",
        "campaign_name",
        "campaign_id",
        "impressions",
        "clicks",
        "spend",
        "conversions",
        "cvr_google",
        "cpa_google",
        "revenue",
    ]
    df = pd.read_csv(raw_path, skiprows=4, names=column_names, na_values=["--"])

    # Google privacy threshold sometimes reports "< 10" etc.
    df["conversions"] = (
        df["conversions"].astype(str).str.replace("< 10", "5", regex=False)
    )
    df["conversions"] = pd.to_numeric(df["conversions"], errors="coerce")

    df["cvr_google"] = (
        df["cvr_google"].astype(str).str.replace("%", "", regex=False)
    )
    df["cvr_google"] = pd.to_numeric(df["cvr_google"], errors="coerce") / 100.0

    df["cpa_google"] = pd.to_numeric(df["cpa_google"], errors="coerce")
    df["revenue"] = pd.to_numeric(df["revenue"], errors="coerce")
    df["spend"] = pd.to_numeric(df["spend"], errors="coerce")
    df["clicks"] = pd.to_numeric(df["clicks"], errors="coerce")
    df["impressions"] = pd.to_numeric(df["impressions"], errors="coerce")

    df["ctr"] = df["clicks"] / df["impressions"]
    df["platform"] = "Google"
    df["roas"] = df["revenue"] / df["spend"]

    df = _replace_inf_with_nan(df, ["ctr", "roas"])
    df = df.rename(columns={"cvr_google": "cvr", "cpa_google": "cpa"})
    df = df.drop(columns=[col for col in ["campaign_id"] if col in df.columns])
    df["date"] = pd.to_datetime(df["date"])

    return df[FINAL_COLUMNS].copy()


def clean_tiktok_ads(raw_path: Path) -> pd.DataFrame:
    """Clean TikTok Ads export."""
    rename_map = {
        "Date": "date",
        "Campaign Name": "campaign_name",
        "Ad Group Name": "ad_group_name",
        "Cost": "spend",
        "Impressions": "impressions",
        "Clicks": "clicks",
        "Conversions": "conversions",
        "CPA": "cpa",
        "CTR": "ctr",
        "CVR": "cvr",
        "Video Views": "views",
        "Video Play Actions": "actions",
        "Learning Status": "learning_status",
    }
    df = pd.read_csv(raw_path, na_values=["--"]).rename(columns=rename_map)

    df["date"] = pd.to_datetime(df["date"])
    df["ctr"] = (
        df["ctr"].astype(str).str.replace("%", "", regex=False)
    ).astype(float) / 100.0
    df["cvr"] = (
        df["cvr"].astype(str).str.replace("%", "", regex=False)
    ).astype(float) / 100.0

    df["spend"] = pd.to_numeric(df["spend"], errors="coerce")
    df["conversions"] = pd.to_numeric(df["conversions"], errors="coerce")

    df["revenue"] = 80 * df["conversions"]
    df["roas"] = df["revenue"] / df["spend"]
    df["platform"] = "TikTok"

    df = _replace_inf_with_nan(df, ["ctr", "cvr", "roas"])

    # Some exports include pre-calculated CPA; recompute to ensure consistency.
    df["cpa"] = df["spend"] / df["conversions"]
    df = _replace_inf_with_nan(df, ["cpa"])

    return df[FINAL_COLUMNS].copy()


def integrate_platforms(platform_frames: Dict[str, pd.DataFrame]) -> pd.DataFrame:
    """Concatenate cleaned frames from each platform."""
    frames = []
    for platform, frame in platform_frames.items():
        if not isinstance(frame, pd.DataFrame):
            raise TypeError(f"{platform} frame must be a pandas DataFrame")
        frames.append(frame.copy())

    integrated = pd.concat(frames, ignore_index=True)
    integrated = integrated.sort_values(["date", "platform"]).reset_index(drop=True)
    return integrated


def run_week1_pipeline(
    raw_dir: Path,
    processed_dir: Path,
) -> Week1Outputs:
    """
    Execute the full Week 1 cleaning workflow.

    Parameters
    ----------
    raw_dir
        Directory containing raw exports (meta_ads_raw.csv, google_ads_raw.csv,
        tiktok_ads_raw.csv).
    processed_dir
        Directory where cleaned CSVs should be saved.
    """
    processed_dir.mkdir(parents=True, exist_ok=True)

    meta = clean_meta_ads(raw_dir / "meta_ads_raw.csv")
    google = clean_google_ads(raw_dir / "google_ads_raw.csv")
    tiktok = clean_tiktok_ads(raw_dir / "tiktok_ads_raw.csv")

    meta_path = processed_dir / "meta_cleaned.csv"
    google_path = processed_dir / "google_cleaned.csv"
    tiktok_path = processed_dir / "tiktok_cleaned.csv"

    meta.to_csv(meta_path, index=False)
    google.to_csv(google_path, index=False)
    tiktok.to_csv(tiktok_path, index=False)

    integrated = integrate_platforms(
        {"Meta": meta, "Google": google, "TikTok": tiktok}
    )
    integrated_path = processed_dir / "integrated_data.csv"
    integrated.to_csv(integrated_path, index=False)

    return Week1Outputs(
        meta_cleaned=meta_path,
        google_cleaned=google_path,
        tiktok_cleaned=tiktok_path,
        integrated=integrated_path,
    )


__all__ = [
    "Week1Outputs",
    "clean_meta_ads",
    "clean_google_ads",
    "clean_tiktok_ads",
    "integrate_platforms",
    "run_week1_pipeline",
]

